 bridge_Editordjeanner_Version1_SourceNMRspinSystemModel_CSA_IDnone(
	input
) {
	const obj = this.data;
	const objDataField = param.objDataField;
	const objectObj = param.objectObj;
	const objSource = param.object;
	if (!objSource) {
		console.error(
			"No objSource string in param. Error generated by export_Editordjeanner_Version1_SourceMnovaJson_IDnone param : ",
			param
		);
		return {};
	}
	if (objSource === "nmrSpectrumObject") {
		// no implementation of version of input and output objects

		//Naive building
		console.log("bridge solidStateNMRCSA input:", input);
		console.log("bridge solidStateNMRCSA this:", this);

		// main call to conveter
		const ret_csa2xyNMR = csa2xyNMR([100, -100, 532]);
		const { x, y, iso, sAni, eta, mi, ma, integral, source } = ret_csa2xyNMR;

		if (this.verbose) {
			console.log(" zz :", zz, " yy :", yy, " xx :", xx);
			console.log(" sAni :", sAni);
			console.log("eta :", eta);
			console.log("sAni :", sAni);
			console.log("vvinit :", iso);
			console.log("vvmax :", Math.sqrt(xx * xx + yy * yy + zz * zz));
		}

		// Naive origin building
		var origin = {
			comment_origin:
				"generated by bridge_Editordjeanner_Version1_SourcesolidStateNMRCSA_IDnone",
		};
		origin["technical_source"] = source;
		origin["origin"] = input.origin; // inheritage
		// add time ?...

		// main data generation
		const firstPoint = Math.max(x[0], x[x.length - 1]);
		const lastPoint = Math.min(x[0], x[x.length - 1]);
		const values = x[0] < x[x.length - 1] ? [...y] : [...y].reverse();

		// create content of output
		output = { firstPoint, lastPoint, values };
		output.origin = origin;

		return output;
	}
	console.error(
		`objSource : ${objSource} not implemented from bridge_Editordjeanner_Version1_SourceNMRspinSystemModel_CSA_IDnone`
	);
	return {};
}
