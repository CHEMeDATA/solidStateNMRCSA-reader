// AUTOMATIC IMPORT INSERTION WILL BE MADE HERE
// include for bridge from solidStateNMRCSA-reader
import { csa2xyNMR } from "./csa2xyNMR.js";

import { ObjectBase } from "./objectBase.js";

export class NMRspinSystemModel_CSA extends ObjectBase {
	constructor(param, input) {
		super(param, input, "NMRspinSystemModel_CSA");
		// optionally override again
		this.verbose = 0;
	}

	_handleLoadDemoData(input) {
		this._loadDemoData(input);
	}

	_loadDemoData(input) {
	}

// AUTOMATIC METHOD INSERTION WILL BE MADE HERE
 bridge_Editordjeanner_Version1_SourceNMRspinSystemModel_CSA_IDnone(input) {
	// no implementation of version of input and output objects

	//Naive building
	console.log("bridge solidStateNMRCSA input:", input);
	console.log("bridge solidStateNMRCSA this:", this);

	// main call to conveter
	const ret_csa2xyNMR = csa2xyNMR([100, -100, 532]);
	const { x, y, iso, sAni, eta, mi, ma, integral, source } = ret_csa2xyNMR;

	if (this.verbose) {
		console.log(" zz :", zz, " yy :", yy, " xx :", xx);
		console.log(" sAni :", sAni);
		console.log("eta :", eta);
		console.log("sAni :", sAni);
		console.log("vvinit :", iso);
		console.log("vvmax :", Math.sqrt(xx * xx + yy * yy + zz * zz));
	}

	// Naive origin building
	var origin = {
		comment_origin:
			"generated by bridge_Editordjeanner_Version1_SourcesolidStateNMRCSA_IDnone",
	};
	origin["technical_source"] = source;
	origin["origin"] = input.origin; // inheritage
	// add time ?...

	// main data generation
	const firstPoint = Math.max(x[0], x[x.length - 1]);
	const lastPoint = Math.min(x[0], x[x.length - 1]);
	const values = x[0] < x[x.length - 1] ? [...y] : [...y].reverse();

	// create content of output
	var output = { firstPoint, lastPoint, values };
	output.origin = origin;

	return output;
}

}
