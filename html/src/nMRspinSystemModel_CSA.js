// AUTOMATIC IMPORT INSERTION WILL BE MADE HERE
// include for bridge from solidStateNMRCSA-reader
import { ViewerBase } from "./viewerBase.js";
import { csa2xyNMR } from "./csa2xyNMR.js";

// include for bridge from solidStateNMRCSA-reader

import { ObjectBase } from "./objectBase.js";

export class NMRspinSystemModel_CSA extends ObjectBase {
	constructor(param, input) {
		super(param, input, "NMRspinSystemModel_CSA");
		// optionally override again
		this.verbose = 0;
	}

	_handleLoadDemoData(demoParam) {
		this._loadDemoData(demoParam);
	}

	_loadDemoData(demoParam = {}) {
		var spins = [];
		for (const elem of demoParam) {
			const diagTensorValues = {
				wildComment:
					"Created by schema/scripts/createSchemaSomeInstances.js using function createInstance",
				xx: elem[0],
				yy: elem[1],
				zz: elem[2],
			};
			const spin = {
				wildComment:
					"Created by schema/scripts/createSchemaSomeInstances.js using function createInstance",
				typeVariableString: "ChemicalShift",
				diagTensorValues: diagTensorValues,
			};
			spins.push(spin);
		}

		const full = {
			$schema:
				"https://chemedata.github.io/schema/v1/schema/NMRspinSystemModel_CSA.json",
			wildComment: "Created by demo option ",
			spins: spins,
		};

		this.data = full;
	}

// AUTOMATIC METHOD INSERTION WILL BE MADE HERE
 bridge_Editordjeanner_Version1_SourcesolidStateNMRCSA_IDnone(
	param
) {
	const name = "bridge_Editordjeanner_Version1_SourcesolidStateNMRCSA_IDnone";

	const obj = this.data;
	const objDataField = param.objDataField;
	const objectObj = param.objectObj;
	const objSource = param.object;
	const newFields = param.newFields;

	if (!objSource) {
		console.error(
			`No objSource string in param. Error generated by ${name} param : `,
			param
		);
		return {};
	}
	if (objSource === "nmrSpectrumObject") {
		// no implementation of version of param and output objects

		//Naive building
		if (this.verbose) console.log("bridge solidStateNMRCSA param:", param);
		if (this.verbose) console.log("bridge solidStateNMRCSA this:", this);
		var valuesCSA = [];
		valuesCSA.push(this.data.spins[0].diagTensorValues.xx);
		valuesCSA.push(this.data.spins[0].diagTensorValues.yy);
		valuesCSA.push(this.data.spins[0].diagTensorValues.zz);
		if (this.verbose) console.log("bridge solidStateNMRCSA valuesCSA:", valuesCSA);

		// main call to conveter
		const ret_csa2xyNMR = csa2xyNMR(valuesCSA);
		const { x, y, iso, sAni, eta, mi, ma, integral, source } = ret_csa2xyNMR;

		if (this.verbose) {
			console.log(" zz :", zz, " yy :", yy, " xx :", xx);
			console.log(" sAni :", sAni);
			console.log("eta :", eta);
			console.log("sAni :", sAni);
			console.log("vvinit :", iso);
			console.log("vvmax :", Math.sqrt(xx * xx + yy * yy + zz * zz));
		}

		// Naive origin building
		var origin = {
			comment_origin:
				`generated by ${name}`,
		};
		origin["technical_source"] = source;
		origin["origin"] = param.origin; // inheritage
		// add time ?...

		// main data generation
		const p0 = x[0] / newFields.frequency
		const pn = x[x.length - 1] / newFields.frequency
		const firstPoint = Math.max(p0, pn);
		const lastPoint = Math.min(p0, pn);
		const values = p0 < pn ? [...y] : [...y].reverse();

		// create content of output
		const output = {firstPoint, lastPoint, values, origin, ...newFields};

		return output;
	}
	console.error(
		`objSource : ${objSource} not implemented from ${name}`
	);
	return {};
}


}
